/* SPDX-License-Identifier: GPL-2.0-only
 *
 * Copyright 2021 Google LLC
 */
#ifndef __LINUX_GSA_SJTAG_H
#define __LINUX_GSA_SJTAG_H

#include <linux/device.h>
#include <linux/types.h>

/*
 * GSA SJTAG interface.
 *
 * In general, the following call sequence is expected:
 *
 * call gsa_sjtag_get_chip_id() - to retrieve chip ID
 *
 * call gsa_sjtag_get_pub_key_hash() - to retrieve the hash (SHA512) of the
 * SJTAG public key programmed in GSA OTP.
 *
 * call gsa_sjtag_set_pub_key() - to start SJTAG authentication session
 *
 * call gsa_sjtag_get_challenge() - to retrieve the challenge generated by
 * SJTAG hardware to be send to the SJTAG server for signing.
 *
 * call gsa_sjtag_send_srv_response() - to send the response received from
 * the  SJTAG server.
 *
 * It is expected that after successfully completing all steps GSA SJTAG will be
 * enabled on this device.
 */

/**
 * gsa_sjtag_get_status() - get status for SJTAG GSA HW block
 * @gsa: pointer to GSA device
 * @debug_allowed: pointer to u32 variable to store debug allowed state
 *                 (can be NULL)
 * @hw_state: pointer to u32 variable to store SJTAG hw state (can be NULL)
 * @debug_time: pointer to u32 variable to store debug time state of SJTAG
 *              block (can be NULL)
 *
 * Calling this routine does not change SJTAG state.
 *
 * Return: 0 on success, negative error code otherwise.
 */
int gsa_sjtag_get_status(struct device *gsa, u32 *debug_allowed, u32 *hw_state,
			 u32 *debug_time);

/**
 * gsa_sjtag_get_chip_id() - get SJTAG chip ID
 * @gsa: pointer to GSA device
 * @chip_id: pointer to array to place chip id into.
 *
 * Calling this routine does not change SJTAG state.
 *
 * Return: 0 on success, negative error code otherwise.
 */
int gsa_sjtag_get_chip_id(struct device *gsa, u32 id[2]);

/**
 * gsa_sjtag_get_pub_key_hash() - retrieve the hash of the SJTAG public key
 * @gsa: pointer to GSA device
 * @hash: pointer to the buffer to store SJTAG public key hash
 * @size: size of the buffer specified by @hash parameter
 * @cmd_status: pointer to variable to store sjtag operation status
 *
 * Calling this routine does not change SJTAG state.
 *
 * Return: number of bytes placed into @hash buffer on success or a negative
 * error code otherwise.
 */
int gsa_sjtag_get_pub_key_hash(struct device *gsa, void *hash, size_t size,
			       u32 *cmd_status);

/**
 * gsa_sjtag_set_pub_key() - program SJTAG public key
 * @gsa: pointer to GSA device
 * @pub: pointer to the buffer containing SJTAG public key to program
 * @size: size of the key specified by @pub parameter
 * @cmd_status: pointer to variable to store sjtag operation status
 *
 * Calling this routine initiates SJTAG authentication sequence.
 *
 * Return: 0 on success or a negative error code otherwise.
 */
int gsa_sjtag_set_pub_key(struct device *gsa, const void *pub, size_t size,
			  u32 *cmd_status);

/**
 * gsa_sjtag_get_challenge() - get SJTAG challenge
 * @gsa: pointer to GSA device
 * @challenge: pointer to the buffer to store SJTAG challenge
 * @size: size of the buffer specified by @challenge parameter
 * @cmd_status: pointer to variable to store sjtag operation status
 *
 * This routine can be only invoked after successful invocation of
 * gsa_sjtag_set_pub_key() routine. This call advances SJTAG state machine.
 *
 * Return: number of bytes placed into @challenge buffer on success or a
 * negative error code otherwise.
 */
int gsa_sjtag_get_challenge(struct device *gsa, void *challenge, size_t size,
			    u32 *cmd_status);

/**
 * gsa_sjtag_send_srv_response() - send SJTAG server response
 * @gsa: pointer to GSA device
 * @rsp: pointer to the buffer containing server response to the SJTAG challenge
 *       obtained by calling gsa_sjtag_get_challenge() routine
 * @size: size of the server response specified by @rsp parameter
 * @cmd_status: pointer to variable to store sjtag operation status
 *
 * This is the last call in SJTAG authentication sequence.
 *
 * Return: 0 on success or a negative error code otherwise.
 */
int gsa_sjtag_send_srv_response(struct device *gsa,
				const void *rsp, size_t size,
				u32 *cmd_status);

/**
 * gsa_sjtag_end_session() - end current SJTAG session
 * @gsa: pointer to GSA device
 * @status: pointer to variable to store sjtag operation status
 *
 * Return: 0 on success or a negative error code otherwise.
 */
int gsa_sjtag_end_session(struct device *gsa, u32 *cmd_status);

#endif /* __LINUX_GSA_SJTAG_H */
